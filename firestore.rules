rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ユーザーが認証されているかチェック!
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // リクエストユーザーが指定されたユーザーIDと一致するかチェック
    function isUserAuthenticated(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // 管理者権限チェック
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // ユーザーコレクション
    match /users/{userId} {
      allow read: if isUserAuthenticated(userId) || isAdmin();
      allow write: if isUserAuthenticated(userId) || isAdmin();
    }

    // 模試コレクション
    match /exams/{examId} {
      allow read: if true; // 模試一覧は誰でも閲覧可能
      allow write: if isAdmin(); // 管理者のみ書き込み可能
    }

    // 回答履歴コレクション
    match /exam_attempts/{attemptId} {
      allow read: if isUserAuthenticated(resource.data.userId) || isAdmin();
      allow create: if isUserAuthenticated(request.resource.data.userId)
                      && request.resource.data.status == 'in-progress' // 初期ステータスは 'in-progress'
                      && request.resource.data.currentStructureIndex == 0 // 初期インデックスは 0
                      && request.resource.data.startedAt == request.time // 開始時間はサーバータイムスタンプ
                      && request.resource.data.keys().hasAll(['userId', 'examId', 'examTitle', 'startedAt', 'status', 'currentStructureIndex', 'sections']) // 必須フィールドチェック
                      && !request.resource.data.keys().hasAny(['completedAt', 'overallScore', 'updatedAt']); // 作成時に存在してはいけないフィールド

      allow update: if (isUserAuthenticated(resource.data.userId) || isAdmin())
                     // 更新対象ドキュメントが自分のものか、または管理者の場合
                     && resource.data.status == 'in-progress' // 進行中のもののみ更新可能
                     && request.resource.data.userId == resource.data.userId // userId は変更不可
                     && request.resource.data.examId == resource.data.examId // examId は変更不可
                     && request.resource.data.startedAt == resource.data.startedAt // startedAt は変更不可
                     && request.resource.data.examTitle == resource.data.examTitle // examTitle は変更不可
                     && request.resource.data.keys().hasOnly(['userId', 'examId', 'examTitle', 'startedAt', 'status', 'currentStructureIndex', 'sections', 'completedAt', 'updatedAt']) // 更新可能なフィールドを限定
                     && (request.resource.data.status == 'in-progress' || request.resource.data.status == 'completed') // status は 'in-progress' または 'completed' のみ
                     && request.resource.data.currentStructureIndex >= resource.data.currentStructureIndex // インデックスは戻せない
                     && request.resource.data.sections.keys().hasAll(resource.data.sections.keys())
                     // --- セクション内フィールド検証をコメントアウトに戻す ---
                     // && request.resource.data.sections.keys().forall(
                     //      sectionKey | 
                     //        request.resource.data.sections[sectionKey].keys().size() == 5 &&
                     //        request.resource.data.sections[sectionKey].keys().hasAll([\'status\', \'answers\', \'score\', \'completedAt\', \'updatedAt\'])
                     //    )
                     // --- コメントアウトここまで ---
                     && request.resource.data.updatedAt == request.time;

      allow delete: if false; // 削除は不可 (または isAdmin())
    }

    // サブスクリプションコレクション
    match /subscriptions/{subscriptionId} {
      allow read: if isUserAuthenticated(resource.data.userId) || isAdmin();
      allow create: if isUserAuthenticated(request.resource.data.userId);
      allow update: if isAdmin(); // 管理者のみが更新可能
      allow delete: if false;
    }

    // 購入履歴コレクション
    match /purchases/{purchaseId} {
      allow read: if isUserAuthenticated(resource.data.userId) || isAdmin();
      allow create: if isUserAuthenticated(request.resource.data.userId);
      allow update: if isAdmin(); // 管理者のみが更新可能
      allow delete: if false;
    }
    
    // ★ 問題コレクションをルートレベルに移動 ★
    match /questions/{questionId} {
      allow read: if isAuthenticated(); // 認証済みユーザーは読み取り可能
      allow write: if isAdmin(); // 管理者のみ書き込み可能
    }
  }
}