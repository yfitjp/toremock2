rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ユーザーが認証されているかチェック!
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // リクエストユーザーが指定されたユーザーIDと一致するかチェック
    function isUserAuthenticated(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // 管理者権限チェック
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // ユーザーコレクション
    match /users/{userId} {
      allow read: if isUserAuthenticated(userId) || isAdmin();
      allow write: if isUserAuthenticated(userId) || isAdmin();
    }

    // 模試コレクション
    match /exams/{examId} {
      allow read: if true; // 模試一覧は誰でも閲覧可能
      allow write: if true; // 開発中は誰でも書き込み可能
    }

    // 回答履歴コレクション
    match /exam_attempts/{attemptId} {
      allow read: if isUserAuthenticated(resource.data.userId) || isAdmin();
      allow create: if isUserAuthenticated(request.resource.data.userId);
      allow update, delete: if false; // 回答は作成のみ可能
    }

    // サブスクリプションコレクション
    match /subscriptions/{subscriptionId} {
      allow read: if isUserAuthenticated(resource.data.userId) || isAdmin();
      allow create: if isUserAuthenticated(request.resource.data.userId);
      allow update: if isAdmin(); // 管理者のみが更新可能
      allow delete: if false;
    }

    // 購入履歴コレクション
    match /purchases/{purchaseId} {
      allow read: if isUserAuthenticated(resource.data.userId) || isAdmin();
      allow create: if isUserAuthenticated(request.resource.data.userId);
      allow update: if isAdmin(); // 管理者のみが更新可能
      allow delete: if false;
    }
    
    // ★ 問題コレクションをルートレベルに移動 ★
    match /questions/{questionId} {
      allow read: if isAuthenticated(); // 認証済みユーザーのみ読み取り可能
      allow write: if true; // 開発中は誰でも書き込み可能
    }
  }
}