rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ユーザーが認証されているかチェック!
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // リクエストユーザーが指定されたユーザーIDと一致するかチェック
    function isUserAuthenticated(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // 管理者権限チェック
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // ユーザーコレクション
    match /users/{userId} {
      allow read: if isUserAuthenticated(userId) || isAdmin();
      allow write: if isUserAuthenticated(userId) || isAdmin();
    }

    // 模試コレクション
    match /exams/{examId} {
      allow read: if true; // 模試一覧は誰でも閲覧可能
      allow write: if isAdmin(); // 管理者のみ書き込み可能
    }

    // 回答履歴コレクション
    match /exam_attempts/{attemptId} {
      allow read: if isUserAuthenticated(resource.data.userId) || isAdmin();
      allow create: if isUserAuthenticated(request.resource.data.userId)
                      && request.resource.data.status == 'in-progress' // 初期ステータスは 'in-progress'
                      && request.resource.data.currentStructureIndex == 0 // 初期インデックスは 0
                      && request.resource.data.startedAt == request.time // 開始時間はサーバータイムスタンプ
                      && request.resource.data.keys().hasAll(['userId', 'examId', 'examTitle', 'startedAt', 'status', 'currentStructureIndex', 'sections']) // 必須フィールドチェック
                      && !request.resource.data.keys().hasAny(['completedAt', 'overallScore', 'updatedAt']); // 作成時に存在してはいけないフィールド

      allow update: if (isUserAuthenticated(resource.data.userId) || isAdmin())
                     && request.resource.data.userId == resource.data.userId 
                     && request.resource.data.examId == resource.data.examId 
                     && request.resource.data.startedAt == resource.data.startedAt 
                     && request.resource.data.examTitle == resource.data.examTitle 
                     && request.resource.data.keys().hasOnly(
                        ['userId', 'examId', 'examTitle', 'startedAt', 'status', 
                         'currentStructureIndex', 'completedAt', 'updatedAt', 'overallScore']
                        // 'sections' キーは意図的に除外
                      )
                     && (request.resource.data.status == 'in-progress' || request.resource.data.status == 'completed') 
                     && request.resource.data.currentStructureIndex >= resource.data.currentStructureIndex 
                     && request.resource.data.updatedAt == request.time;

      allow delete: if false; // 削除は不可 (または isAdmin())

      // sections サブコレクションのルール
      match /sections/{sectionDocId} {
        allow read: if get(/databases/$(database)/documents/exam_attempts/$(attemptId)).data.userId == request.auth.uid || isAdmin();
        
        allow write: if (get(/databases/$(database)/documents/exam_attempts/$(attemptId)).data.userId == request.auth.uid || isAdmin())
                      && request.resource.data.keys().hasOnly([
                          'status', 'answers', 'score', 'feedback', 
                          'positive_points', 'areas_for_improvement', 
                          'audioStorageUrl', 'transcribedText', 'transcriptionError', 
                          'startedAt', 'completedAt' // completedAt は request.time との比較も考慮
                         ]) 
                      && (request.resource.data.status == 'pending' || 
                          request.resource.data.status == 'in-progress' || 
                          request.resource.data.status == 'completed' ||
                          request.resource.data.status == 'skipped')
                      // completedAt は設定時のみサーバータイムスタンプであることを確認 (または既存の値を保持)
                      // startedAt も同様の考慮が必要な場合がある
                      // && (request.resource.data.completedAt == request.time || (resource.data.completedAt != null && request.resource.data.completedAt == resource.data.completedAt) || resource.data.completedAt == null)
                      // && (request.resource.data.startedAt == request.time || (resource.data.startedAt != null && request.resource.data.startedAt == resource.data.startedAt) || resource.data.startedAt == null)
                      ;
      }
    }

    // サブスクリプションコレクション
    match /subscriptions/{subscriptionId} {
      allow read: if isUserAuthenticated(resource.data.userId) || isAdmin();
      allow create: if isUserAuthenticated(request.resource.data.userId);
      allow update: if isAdmin(); // 管理者のみが更新可能
      allow delete: if false;
    }

    // 購入履歴コレクション
    match /purchases/{purchaseId} {
      allow read: if isUserAuthenticated(resource.data.userId) || isAdmin();
      allow create: if isUserAuthenticated(request.resource.data.userId);
      allow update: if isAdmin(); // 管理者のみが更新可能
      allow delete: if false;
    }
    
    // ★ 問題コレクションをルートレベルに移動 ★
    match /questions/{questionId} {
      allow read: if isAuthenticated(); // 認証済みユーザーは読み取り可能
      allow write: if isAdmin(); // 管理者のみ書き込み可能
    }
  }
}